name: Build Flet Android APK

on:
  push:
    branches: [ "main" ]

jobs:
  build-apk:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps (including flet)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          pip install flet

      - name: Set up Java (JDK 11)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'

      - name: Prepare Android keystore (from secret) if provided
        env:
          KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          # ensure android/app dir exists for typical Flutter project layout
          mkdir -p android/app
          if [ -n "$KEYSTORE_BASE64" ]; then
            echo "Decoding keystore from secret..."
            echo "$KEYSTORE_BASE64" | base64 --decode > android/app/keystore.jks
            ls -lh android/app/keystore.jks
          else
            echo "No ANDROID_KEYSTORE_BASE64 secret provided — will build unsigned APK."
          fi

      - name: Create android/key.properties from secrets (if keystore provided)
        env:
          STORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_PASS: ${{ secrets.ANDROID_KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        run: |
          # create android directory if doesn't exist
          mkdir -p android
          # write key.properties only if alias and passwords provided
          if [ -n "$STORE_PASS" ] && [ -n "$KEY_PASS" ] && [ -n "$KEY_ALIAS" ]; then
            cat > android/key.properties <<EOF
storePassword=${STORE_PASS}
keyPassword=${KEY_PASS}
keyAlias=${KEY_ALIAS}
storeFile=app/keystore.jks
EOF
            echo "key.properties created."
          else
            echo "key.properties not created (missing signing secrets)."
          fi

      - name: Build APK (Flet)
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          # Ensure latest build tools available (flutter-action normally sets SDK)
          flutter --version
          # build release APK via flet (this command creates a Flutter project and builds apk)
          python -m pip install --upgrade flet
          # If you use a different entrypoint filename, adjust command — flet CLI will package your app
          flet build apk --release || flet build apk || true
          # list possible output locations
          echo "looking for apk files..."
          find . -type f -name '*.apk' -print || true

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: chrodis-apk
          path: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/flutter-apk/app-release-unsigned.apk
            *.apk
